{"version":3,"sources":["components/info.js","components/form.js","components/weather_info.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","className","Component","Form","props","onSubmit","weatherMethod","type","name","placeholder","WeatherInfo","this","city","country","temp","sunrise","sunset","error","API_KEY","App","state","undefined","gettingWeather","_callee","e","City","ApiUrl","date","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","_this","time","data","d","Date","setTime","getHours","getMinutes","getSeconds","setState","main","sys","t0","console","log","alert","stop","info","components_form","weather_info","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ee40469.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Info extends Component{\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1 className=\"title-container__title\">Погодное приложение</h1>\r\n        <p className=\"title-container__subtitle\">Узнайте погоду в своем городе</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Info;","import React, { Component } from 'react';\r\n\r\nconst Form = props => {\r\n  return(\r\n  <form onSubmit={props.weatherMethod}>\r\n    <input type=\"text\" name=\"city\" placeholder=\"Город\"/>\r\n    <button>Получить погоду</button>\r\n  </form>\r\n)};\r\n\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\n\r\nclass WeatherInfo extends Component{\r\n  render(){\r\n    return(\r\n      <div >\r\n        {this.props.city &&\r\n          <div className=\"weather-info\">\r\n            <p className=\"weather__key\">Местопложение:<span className=\"weather__value\"> {this.props.city} , {this.props.country}</span> </p>\r\n            <p className=\"weather__key\">Температура:<span className=\"weather__value\"> {this.props.temp}</span> </p>\r\n            <p className=\"weather__key\">Восход солнца:<span className=\"weather__value\"> {this.props.sunrise}</span></p>\r\n            <p className=\"weather__key\">Заход солнца:<span className=\"weather__value\"> {this.props.sunset}</span></p>\r\n          </div>\r\n        }\r\n        {this.props.error  && <p className=\"weather__error\">Ошибка: {this.props.error} </p>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherInfo;","import React, { Component } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Info from './components/info';\nimport Form from './components/form';\nimport WeatherInfo from './components/weather_info';\n\nconst API_KEY = \"82b797b6ebc625032318e16f1b42c016\";\n\nclass App extends Component {\n\n  state = {\n    temp: undefined,\n    city: undefined,\n    country: undefined,\n    sunrise: undefined,\n    sunset: undefined,\n    error: undefined\n  }\n\n  gettingWeather = async (e) =>{\n    e.preventDefault();\n    const City = e.target.elements.city.value;\n    try {\n      \n      if(City){\n        const ApiUrl = await \n        fetch(`http://api.openweathermap.org/data/2.5/weather?q=${City}&appid=${API_KEY}&units=metric`);\n        let date = await ApiUrl.json();\n        \n        this.time = (data) =>{\n          let d = new Date();\n          d.setTime(data*1000);\n          return (`${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`);\n        };\n         \n        this.setState({\n          temp:date.main.temp,\n          city: date.name,\n          country: date.sys.country,\n          sunrise: this.time(date.sys.sunrise),\n          sunset: this.time(date.sys.sunset),\n          error: undefined\n        });\n      }else{\n        this.setState({\n          temp: undefined,\n          city: undefined,\n          country: undefined,\n          sunrise: undefined,\n          sunset: undefined,\n          error: \"Введите название города\"\n        });\n      }\n    } catch (error) {\n      console.log(error);\n      alert('Error: Такого города нет');\n    }\n    \n  };\n  \n  render() {\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n               <Info/>\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form weatherMethod={this.gettingWeather}/>\n                <WeatherInfo\n                  temp={this.state.temp}\n                  city={this.state.city}\n                  country={this.state.country}\n                  sunrise={this.state.sunrise}\n                  sunset={this.state.sunset}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n            </div>\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}